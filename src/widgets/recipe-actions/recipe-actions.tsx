import { useEffect, useState } from "react";
import { RecipeType } from "../../entities/data";
import './recipe-actions.css';
import { useNavigate } from "react-router-dom";
import { useRecipes } from "../../app/recipes-context";
import { jsPDF } from "jspdf";
import "../recipe-actions/Roboto-Regular-normal"

interface RecipeActionsProps {
  recipe: RecipeType
}

export default function RecipeActions({ recipe }: RecipeActionsProps) {
  const { updateRecipe, deleteRecipe } = useRecipes();
  const navigate = useNavigate();
  const [isFavorite, setIsFavorite] = useState(recipe.favorite);

  useEffect(() => {
    setIsFavorite(recipe.favorite);
  }, [recipe.favorite]);

  const toggleFavorite = () => {
    const updatedRecipe = {
      ...recipe,
      favorite: !isFavorite
    };
    updateRecipe(updatedRecipe);
    setIsFavorite(updatedRecipe.favorite);
    
    const favoritesString = localStorage.getItem('favorites') || '[]';
    const favorites: number[] = JSON.parse(favoritesString) as number[];
    
    if (updatedRecipe.favorite) {
      localStorage.setItem('favorites', JSON.stringify([...favorites, updatedRecipe.id]));
    } else {
      localStorage.setItem('favorites', JSON.stringify(favorites.filter(id => id !== updatedRecipe.id)));
    }
  };

  const handleEdit = (recipeId: number) => {
    navigate(`/edit-recipe/${recipeId}`);
  };
    
  const handleDelete = (recipeId: number) => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç "${recipe.name}"?`)) {
      const favoritesString = localStorage.getItem('favorites') || '[]';
      const favorites: number[] = JSON.parse(favoritesString) as number[];
      localStorage.setItem('favorites', JSON.stringify(favorites.filter(id => id !== recipeId)));
      deleteRecipe(recipeId);
      navigate('/');
    }
  };

  const saveAsPdf = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 20;
    let yPos = margin;
    let imageProcessed = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à—Ä–∏—Ñ—Ç–∞
    doc.setFont("Roboto-Regular", "normal");

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const checkPageBreak = (requiredHeight: number) => {
      if (yPos + requiredHeight > pageHeight - margin) {
        doc.addPage();
        yPos = margin;
      }
    };

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    doc.setFontSize(20);
    checkPageBreak(25);
    doc.text(recipe.name, pageWidth / 2, yPos, { align: 'center' });
    yPos += 25;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (recipe.img) {
      const img = new Image();
      
      const handleImageLoad = () => {
        if (imageProcessed) return; // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        imageProcessed = true;
        
        try {
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
          const maxWidth = pageWidth - 2 * margin;
          const ratio = Math.min(maxWidth / img.width, (pageHeight / 3) / img.height);
          const displayWidth = img.width * ratio;
          const displayHeight = img.height * ratio;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          checkPageBreak(displayHeight);
          doc.addImage(
            recipe.img.startsWith('data:') ? recipe.img : img.src,
            getImageType(recipe.img),
            (pageWidth - displayWidth) / 2, yPos,
            displayWidth, displayHeight
          );
          yPos += displayHeight + 10;
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
        } finally {
          generatePdfContent();
        }
      };

      img.onload = handleImageLoad;
      img.onerror = () => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
        generatePdfContent();
      };

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (recipe.img.startsWith('data:')) {
        img.src = recipe.img;
      } else {
        const fullPath = recipe.img.startsWith('/') ? recipe.img : `/img/${recipe.img}`;
        img.src = fullPath;
      }

      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ (–∏–∑ –∫—ç—à–∞)
      if (img.complete) {
        handleImageLoad();
      }
    } else {
      generatePdfContent();
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ PDF
    function generatePdfContent() {
      // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      doc.setFontSize(14);
      checkPageBreak(40);
      doc.text(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${recipe.category()}`, margin, yPos);
      yPos += 10;
      doc.text(`–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: ${recipe.eatingTime()}`, margin, yPos);
      yPos += 10;
      doc.text(`–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ${recipe.cookingTime()}`, margin, yPos);
      yPos += 10;
      doc.text(`–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${recipe.difficulty()}`, margin, yPos);
      yPos += 15;

      // –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
      doc.setFontSize(16);
      checkPageBreak(10);
      doc.text('–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:', margin, yPos);
      yPos += 10;

      doc.setFontSize(12);
      recipe.ingredients.forEach(ingredient => {
        checkPageBreak(7);
        doc.text(`- ${ingredient.name}: ${ingredient.count} ${ingredient.units}`, margin + 5, yPos);
        yPos += 7;
      });

      // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      doc.setFontSize(16);
      checkPageBreak(10);
      doc.text('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:', margin, yPos);
      yPos += 10;

      doc.setFontSize(12);
      const instructions = recipe.todoList.split('\n');
      instructions.forEach(step => {
        const lines = doc.splitTextToSize(step, pageWidth - 2 * margin);
        lines.forEach((line: string | string[]) => {
          checkPageBreak(7);
          doc.text(line, margin + 5, yPos);
          yPos += 7;
        });
        yPos += 5;
      });

      doc.save(`${recipe.name}.pdf`);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    function getImageType(imgPath: string): string {
      if (imgPath.startsWith('data:')) {
        return imgPath.split(';')[0].split('/')[1];
      }
      return imgPath.split('.').pop()?.toLowerCase() || 'jpg';
    }
  };

  return (
    <div className="recipe-actions-container">
      <button
        onClick={toggleFavorite}
        className={`recipe-action-btn favorite-btn ${isFavorite ? 'active' : ''}`}
        aria-label={isFavorite ? "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" : "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"}
      >
        {isFavorite ? '‚òÖ' : '‚òÜ'}
      </button>
      
      <button 
        onClick={() => handleEdit(recipe.id)} 
        className="recipe-action-btn edit-btn"
        aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
      >
        ‚úèÔ∏è
      </button>
      
      <button 
        onClick={() => handleDelete(recipe.id)} 
        className="recipe-action-btn delete-btn"
        aria-label="–£–¥–∞–ª–∏—Ç—å"
      >
        üóëÔ∏è
      </button>

      <button 
        onClick={saveAsPdf} 
        className="recipe-action-btn pdf-btn"
        aria-label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF"
      >
        üìÑ
      </button>
    </div>
  );
}